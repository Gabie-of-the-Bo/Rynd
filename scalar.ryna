interface Scalar<T> {
    fn scalar(obj: Self) -> 'T;
    fn type(obj: Self) -> Int;
}

fn scalar(obj: Int) -> Int {
    return *obj;
}

fn scalar(obj: &Int) -> Int {
    return *obj;
}

fn scalar(obj: @Int) -> Int {
    return *obj;
}

fn type(obj: Int) -> Int {
    return 1;
}

fn type(obj: &Int) -> Int {
    return 1;
}

fn type(obj: @Int) -> Int {
    return 1;
}

implement Scalar<Int> for Int;
implement Scalar<Int> for &Int;
implement Scalar<Int> for @Int;

fn scalar(obj: Float) -> Float {
    return *obj;
}

fn scalar(obj: &Float) -> Float {
    return *obj;
}

fn scalar(obj: @Float) -> Float {
    return *obj;
}

fn type(obj: Float) -> Int {
    return 2;
}

fn type(obj: &Float) -> Int {
    return 2;
}

fn type(obj: @Float) -> Int {
    return 2;
}

implement Scalar<Float> for Float;
implement Scalar<Float> for &Float;
implement Scalar<Float> for @Float;

fn scalar(obj: Bool) -> Int {
    if obj {
        return 1;
    }

    return 0;
}

fn scalar(obj: &Bool) -> Int {
    if obj {
        return 1;
    }

    return 0;
}

fn scalar(obj: @Bool) -> Int {
    if obj {
        return 1;
    }

    return 0;
}

fn type(obj: Bool) -> Int {
    return 3;
}

fn type(obj: &Bool) -> Int {
    return 3;
}

fn type(obj: @Bool) -> Int {
    return 3;
}


implement Scalar<Int> for Bool;
implement Scalar<Int> for &Bool;
implement Scalar<Int> for @Bool;