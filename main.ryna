import * from /slice;
import * from /scalar;

// Native library
let RYND_LIB = load_library($MODULE_PATH + "/native/target/release/rynd_native");

// Functions
let MALLOC = RYND_LIB.demut().get_function("malloc");
let FREE = RYND_LIB.demut().get_function("free");

let RYND_CREATE = RYND_LIB.demut().get_function("create_array");
let RYND_FROM_PTR = RYND_LIB.demut().get_function("array_from_ptr");
let RYND_COPY = RYND_LIB.demut().get_function("copy_array");
let RYND_FREE = RYND_LIB.demut().get_function("free_array");

let RYND_LEN = RYND_LIB.demut().get_function("len");
let RYND_SHAPE = RYND_LIB.demut().get_function("shape");
let RYND_GET = RYND_LIB.demut().get_function("get_elem");
let RYND_ASSIGN = RYND_LIB.demut().get_function("assign_arrays");
let RYND_ASSIGN_MASK = RYND_LIB.demut().get_function("assign_arrays_mask");
let RYND_ASSIGN_SCALAR = RYND_LIB.demut().get_function("assign_array_scalar");
let RYND_ASSIGN_SCALAR_MASK = RYND_LIB.demut().get_function("assign_array_scalar_mask");
let RYND_CAST = RYND_LIB.demut().get_function("cast_array");

let RYND_AND = RYND_LIB.demut().get_function("and_arrays");
let RYND_OR = RYND_LIB.demut().get_function("or_arrays");
let RYND_XOR = RYND_LIB.demut().get_function("xor_arrays");
let RYND_SUM = RYND_LIB.demut().get_function("sum_arrays");
let RYND_SUB = RYND_LIB.demut().get_function("sub_arrays");
let RYND_MUL = RYND_LIB.demut().get_function("mul_arrays");
let RYND_DIV = RYND_LIB.demut().get_function("div_arrays");
let RYND_MOD = RYND_LIB.demut().get_function("mod_arrays");
let RYND_POW = RYND_LIB.demut().get_function("pow_arrays");
let RYND_EQ  = RYND_LIB.demut().get_function("eq_arrays");
let RYND_NEQ = RYND_LIB.demut().get_function("neq_arrays");
let RYND_LT = RYND_LIB.demut().get_function("lt_arrays");
let RYND_GT = RYND_LIB.demut().get_function("gt_arrays");
let RYND_LEQ = RYND_LIB.demut().get_function("leq_arrays");
let RYND_GEQ = RYND_LIB.demut().get_function("geq_arrays");
let RYND_IDX = RYND_LIB.demut().get_function("index_arrays");

let RYND_SUM_SCALAR = RYND_LIB.demut().get_function("sum_array_scalar");
let RYND_SUB_SCALAR = RYND_LIB.demut().get_function("sub_array_scalar");
let RYND_MUL_SCALAR = RYND_LIB.demut().get_function("mul_array_scalar");
let RYND_DIV_SCALAR = RYND_LIB.demut().get_function("div_array_scalar");
let RYND_MOD_SCALAR = RYND_LIB.demut().get_function("mod_array_scalar");
let RYND_POW_SCALAR = RYND_LIB.demut().get_function("pow_array_scalar");
let RYND_EQ_SCALAR = RYND_LIB.demut().get_function("eq_array_scalar");
let RYND_NEQ_SCALAR = RYND_LIB.demut().get_function("neq_array_scalar");
let RYND_LT_SCALAR = RYND_LIB.demut().get_function("lt_array_scalar");
let RYND_GT_SCALAR = RYND_LIB.demut().get_function("gt_array_scalar");
let RYND_LEQ_SCALAR = RYND_LIB.demut().get_function("leq_array_scalar");
let RYND_GEQ_SCALAR = RYND_LIB.demut().get_function("geq_array_scalar");

let RYND_IOTA = RYND_LIB.demut().get_function("iota");
let RYND_LINSPACE = RYND_LIB.demut().get_function("linspace");
let RYND_RAND = RYND_LIB.demut().get_function("rand_array");
let RYND_NORMAL = RYND_LIB.demut().get_function("normal_array");
let RYND_RESHAPE = RYND_LIB.demut().get_function("reshape_array");
let RYND_SLICE = RYND_LIB.demut().get_function("slice_array");
let RYND_STACK = RYND_LIB.demut().get_function("stack_arrays");
let RYND_CONCAT = RYND_LIB.demut().get_function("concat_arrays");
let RYND_PERMUTE = RYND_LIB.demut().get_function("permute_axes");
let RYND_MATMUL = RYND_LIB.demut().get_function("matmul");

let RYND_NOT = RYND_LIB.demut().get_function("not_array");
let RYND_FLOOR = RYND_LIB.demut().get_function("floor_array");
let RYND_CEIL = RYND_LIB.demut().get_function("ceil_array");
let RYND_ROUND = RYND_LIB.demut().get_function("round_array");
let RYND_NONZERO = RYND_LIB.demut().get_function("nonzero_array");
let RYND_COS = RYND_LIB.demut().get_function("cos_array");
let RYND_SIN = RYND_LIB.demut().get_function("sin_array");
let RYND_TAN = RYND_LIB.demut().get_function("tan_array");
let RYND_ACOS = RYND_LIB.demut().get_function("acos_array");
let RYND_ASIN = RYND_LIB.demut().get_function("asin_array");
let RYND_ATAN = RYND_LIB.demut().get_function("atan_array");
let RYND_SQRT = RYND_LIB.demut().get_function("sqrt_array");
let RYND_EXP = RYND_LIB.demut().get_function("exp_array");
let RYND_LOG2 = RYND_LIB.demut().get_function("log2_array");
let RYND_LN = RYND_LIB.demut().get_function("ln_array");
let RYND_LOG10 = RYND_LIB.demut().get_function("log10_array");
let RYND_COSH = RYND_LIB.demut().get_function("cosh_array");
let RYND_SINH = RYND_LIB.demut().get_function("sinh_array");
let RYND_TANH = RYND_LIB.demut().get_function("tanh_array");
let RYND_CLIP = RYND_LIB.demut().get_function("clip_array");

let RYND_AX_SUM = RYND_LIB.demut().get_function("axis_sum_array");
let RYND_AX_MEAN = RYND_LIB.demut().get_function("axis_mean_array");
let RYND_AX_VAR = RYND_LIB.demut().get_function("axis_var_array");
let RYND_AX_STD = RYND_LIB.demut().get_function("axis_std_array");
let RYND_AX_ARGSORT = RYND_LIB.demut().get_function("axis_argsort_array");
let RYND_AX_SORT = RYND_LIB.demut().get_function("axis_sort_array");
let RYND_AX_MIN = RYND_LIB.demut().get_function("axis_min_array");
let RYND_AX_MAX = RYND_LIB.demut().get_function("axis_max_array");
let RYND_AX_ARGMIN = RYND_LIB.demut().get_function("axis_argmin_array");
let RYND_AX_ARGMAX = RYND_LIB.demut().get_function("axis_argmax_array");
let RYND_AX_DIFF = RYND_LIB.demut().get_function("axis_diff_array");
let RYND_AX_CUMSUM = RYND_LIB.demut().get_function("axis_cumsum_array");
let RYND_AX_REV = RYND_LIB.demut().get_function("axis_reverse_array");

let RYND_PRINT = RYND_LIB.demut().get_function("print_array");

// Array class
class NDArray {
    inner: Pointer;
}

fn destroy(arr: &NDArray) {
    RYND_FREE.demut().call(*arr.inner);
}

implement Destroyable for NDArray;

// Array base interface
interface NDArrayBase {
    fn ptr(obj: Self) -> Pointer;
}

fn ptr(arr: NDArray) -> Pointer {
    return *arr.inner;
}

fn ptr(arr: &NDArray) -> Pointer {
    return *arr.inner;
}

fn ptr(arr: @NDArray) -> Pointer {
    return *arr.inner;
}

implement NDArrayBase for NDArray;
implement NDArrayBase for &NDArray;
implement NDArrayBase for @NDArray;

// Array creation
fn write_to_ptr(ptr: Pointer, offset: Int, value: Int) {
    write_ptr_int(*ptr, *offset, *value);
}

fn write_to_ptr(ptr: Pointer, offset: Int, value: Float) {
    write_ptr_float(*ptr, *offset, *value);
}

fn<S, SI> ndarray(arr: Array<'S [Scalar<'SI>]>) -> NDArray {
    let ptr = MALLOC.demut().call(arr.len()).as<Pointer>();
    let offset = 0;

    for i in arr {
        write_to_ptr(*ptr, *offset, i.cfwd<'S>().scalar());
        offset.inc();
    }

    let res = RYND_FROM_PTR.demut().call(*ptr, type(arr[0].cfwd<'S>()), 1, arr.len()).as<Pointer>();

    FREE.demut().call(*ptr, arr.len());

    return NDArray(*res);
}

fn<S, SI> ndarray(arr: Array<Array<'S [Scalar<'SI>]>>) -> NDArray {
    let height = arr.len();
    let width = arr[0].len();
    let size = height * width; 

    for v in arr {
        if v.len() != width {
            panic("Unable to convert ragged array to NDArray");
        }
    }

    let ptr = MALLOC.demut().call(*size).as<Pointer>();
    let offset = 0;

    for v in arr {
        for i in v {
            write_to_ptr(*ptr, *offset, i.cfwd<'S>().scalar());
            offset.inc();
        }
    }

    let res = RYND_FROM_PTR.demut().call(*ptr, type((arr[0])[0].cfwd<'S>()), 2, *height, *width).as<Pointer>();

    FREE.demut().call(*ptr, *size);

    return NDArray(*res);
}

fn zeros(t: Int, l: Int) -> NDArray {
    return NDArray(RYND_CREATE.demut().call(*t, 1, *l).as<Pointer>());
}

fn iota(l: Int) -> NDArray {
    return NDArray(RYND_IOTA.demut().call(*l).as<Pointer>());
}

fn linspace(f: Int, t: Int) -> NDArray {
    return NDArray(RYND_LINSPACE.demut().call(*f, *t, 1).as<Pointer>());
}

fn linspace(f: Int, t: Int, s: Int) -> NDArray {
    return NDArray(RYND_LINSPACE.demut().call(*f, *t, *s).as<Pointer>());
}

fn rand(d0: Int) -> NDArray {
    return NDArray(RYND_RAND.demut().call(1, *d0).as<Pointer>());
}

fn rand(d0: Int, d1: Int) -> NDArray {
    return NDArray(RYND_RAND.demut().call(2, *d0, *d1).as<Pointer>());
}

fn rand(d0: Int, d1: Int, d2: Int) -> NDArray {
    return NDArray(RYND_RAND.demut().call(3, *d0, *d1, *d2).as<Pointer>());
}

fn normal(mean: Float, std_dev: Float, d0: Int) -> NDArray {
    return NDArray(RYND_NORMAL.demut().call(*mean, *std_dev, 1, *d0).as<Pointer>());
}

fn normal(mean: Float, std_dev: Float, d0: Int, d1: Int) -> NDArray {
    return NDArray(RYND_NORMAL.demut().call(*mean, *std_dev, 2, *d0, *d1).as<Pointer>());
}

fn normal(mean: Float, std_dev: Float, d0: Int, d1: Int, d2: Int) -> NDArray {
    return NDArray(RYND_NORMAL.demut().call(*mean, *std_dev, 3, *d0, *d1, *d2).as<Pointer>());
}

fn<T> reshape(arr: 'T [NDArrayBase], d0: Int) -> NDArray {
    return NDArray(RYND_RESHAPE.demut().call(arr.ptr(), 1, *d0).as<Pointer>());
}

fn<T> reshape(arr: 'T [NDArrayBase], d0: Int, d1: Int) -> NDArray {
    return NDArray(RYND_RESHAPE.demut().call(arr.ptr(), 2, *d0, *d1).as<Pointer>());
}

fn<T> reshape(arr: 'T [NDArrayBase], d0: Int, d1: Int, d2: Int) -> NDArray {
    return NDArray(RYND_RESHAPE.demut().call(arr.ptr(), 3, *d0, *d1, *d2).as<Pointer>());
}

fn<T> reshape(arr: 'T [NDArrayBase], d0: Int, d1: Int, d2: Int, d3: Int) -> NDArray {
    return NDArray(RYND_RESHAPE.demut().call(arr.ptr(), 4, *d0, *d1, *d2, *d3).as<Pointer>());
}

fn<T> reshape(arr: 'T [NDArrayBase], d0: Int, d1: Int, d2: Int, d3: Int, d4: Int) -> NDArray {
    return NDArray(RYND_RESHAPE.demut().call(arr.ptr(), 5, *d0, *d1, *d2, *d3, *d4).as<Pointer>());
}

fn<T> flatten(arr: 'T [NDArrayBase]) -> NDArray {
    return arr.reshape(arr.len());
}

fn<L, R> pow(a: 'L [NDArrayBase], b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_POW.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

fn<A, S, SI> pow(a: 'A [NDArrayBase], b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_POW_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

fn<A, S, SI> pow(b: 'S [Scalar<'SI>], a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_POW_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

fn<T> copy(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_COPY.demut().call(arr.ptr()).as<Pointer>());
}

fn<T> get_int(arr: 'T [NDArrayBase], idx: Int) -> Int {
    return RYND_GET.demut().call(arr.ptr(), *idx, 1).as<Int>();
}

fn<T> get_float(arr: 'T [NDArrayBase], idx: Int) -> Float {
    return RYND_GET.demut().call(arr.ptr(), *idx, 2).as<Float>();
}

fn<T> get_bool(arr: 'T [NDArrayBase], idx: Int) -> Bool {
    return RYND_GET.demut().call(arr.ptr(), *idx, 3).as<Int>() == 1;
}

fn<L, R> assign(arr: 'L [NDArrayBase], value: 'R [NDArrayBase]) {
    RYND_ASSIGN.demut().call(arr.ptr(), value.ptr());
}

fn<L, R, M> assign(arr: 'L [NDArrayBase], value: 'R [NDArrayBase], mask: 'M [NDArrayBase]) {
    RYND_ASSIGN_MASK.demut().call(arr.ptr(), value.ptr(), mask.ptr());
}

fn<T, S, SI> assign(arr: 'T [NDArrayBase], value: 'S [Scalar<'SI>]) {
    RYND_ASSIGN_SCALAR.demut().call(arr.ptr(), value.scalar());
}

fn<T, S, SI, M> assign(arr: 'T [NDArrayBase], value: 'S [Scalar<'SI>], mask: 'M [NDArrayBase]) {
    RYND_ASSIGN_SCALAR_MASK.demut().call(arr.ptr(), value.scalar(), mask.ptr());
}

fn<T> len(arr: 'T [NDArrayBase]) -> Int {
    return RYND_LEN.demut().call(arr.ptr()).as<Int>();
}

fn<T> shape(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_SHAPE.demut().call(arr.ptr()).as<Pointer>());
}

// Casts
fn<T> int(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_CAST.demut().call(arr.ptr(), 1).as<Pointer>());
}

fn<T> float(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_CAST.demut().call(arr.ptr(), 2).as<Pointer>());
}

fn<T> bool(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_CAST.demut().call(arr.ptr(), 3).as<Pointer>());
}

// Operators
op<A> !(a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_NOT.demut().call(a.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) & (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AND.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) | (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_OR.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) ^ (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_XOR.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) + (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_SUM.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) + (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_SUM_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) + (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_SUM_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) - (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_SUB_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) - (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_SUB_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) * (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_MUL_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) * (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_MUL_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) / (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_DIV_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) / (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_DIV_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) % (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_MOD_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) % (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_MOD_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) == (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_EQ_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) == (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_EQ_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) != (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_NEQ_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) != (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_NEQ_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) < (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_LT_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) < (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_LT_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) > (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_GT_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) > (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_GT_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) <= (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_LEQ_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) <= (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_LEQ_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<A, S, SI> (a: 'A [NDArrayBase]) >= (b: 'S [Scalar<'SI>]) -> NDArray {
    return NDArray(RYND_GEQ_SCALAR.demut().call(a.ptr(), b.scalar(), 0).as<Pointer>());
}

op<A, S, SI> (b: 'S [Scalar<'SI>]) >= (a: 'A [NDArrayBase]) -> NDArray {
    return NDArray(RYND_GEQ_SCALAR.demut().call(a.ptr(), b.scalar(), 1).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) - (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_SUB.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) * (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_MUL.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) / (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_DIV.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) % (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_MOD.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) == (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_EQ.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) != (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_NEQ.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) < (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_LT.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) > (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_GT.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) <= (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_LEQ.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase]) >= (b: 'R [NDArrayBase]) -> NDArray {
    return NDArray(RYND_GEQ.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L, R> (a: 'L [NDArrayBase])[b: 'R [NDArrayBase]] -> NDArray {
    return NDArray(RYND_IDX.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

op<L> (a: 'L [NDArrayBase])[s0: Slice] -> NDArray {
    return NDArray(RYND_SLICE.demut().call(a.ptr(), 1, *s0.from_idx, *s0.to_idx, *s0.step).as<Pointer>());
}

op<L> (a: 'L [NDArrayBase])[s0: Slice, s1: Slice] -> NDArray {
    return NDArray(
        RYND_SLICE.demut().call(a.ptr(), 2, 
        *s0.from_idx, *s0.to_idx, *s0.step, 
        *s1.from_idx, *s1.to_idx, *s1.step
    ).as<Pointer>());
}

op<L> (a: 'L [NDArrayBase])[s0: Slice, s1: Slice, s2: Slice] -> NDArray {
    return NDArray(
        RYND_SLICE.demut().call(a.ptr(), 3, 
        *s0.from_idx, *s0.to_idx, *s0.step, 
        *s1.from_idx, *s1.to_idx, *s1.step, 
        *s2.from_idx, *s2.to_idx, *s2.step
    ).as<Pointer>());
}

op<L> (a: 'L [NDArrayBase])[s0: Slice, s1: Slice, s2: Slice, s3: Slice] -> NDArray {
    return NDArray(
        RYND_SLICE.demut().call(a.ptr(), 4, 
        *s0.from_idx, *s0.to_idx, *s0.step, 
        *s1.from_idx, *s1.to_idx, *s1.step, 
        *s2.from_idx, *s2.to_idx, *s2.step, 
        *s3.from_idx, *s3.to_idx, *s3.step
    ).as<Pointer>());
}

op<L> (a: 'L [NDArrayBase])[s0: Slice, s1: Slice, s2: Slice, s3: Slice, s4: Slice] -> NDArray {
    return NDArray(
        RYND_SLICE.demut().call(a.ptr(), 5, 
        *s0.from_idx, *s0.to_idx, *s0.step, 
        *s1.from_idx, *s1.to_idx, *s1.step, 
        *s2.from_idx, *s2.to_idx, *s2.step, 
        *s3.from_idx, *s3.to_idx, *s3.step, 
        *s4.from_idx, *s4.to_idx, *s4.step
    ).as<Pointer>());
}

// Axis functions
fn<T> sum(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_SUM.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> sum(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_SUM.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> mean(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_MEAN.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> mean(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_MEAN.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> var(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_VAR.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> var(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_VAR.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> std(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_STD.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> std(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_STD.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> argsort(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_ARGSORT.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> argsort(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_ARGSORT.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> sort(arr: 'T [NDArrayBase]) {
    RYND_AX_SORT.demut().call(arr.ptr(), -1);
}

fn<T> sort(arr: 'T [NDArrayBase], dim: Int) {
    RYND_AX_SORT.demut().call(arr.ptr(), *dim);
}

fn<T> min(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_MIN.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> min(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_MIN.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> max(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_MAX.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> max(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_MAX.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> argmin(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_ARGMIN.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> argmin(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_ARGMIN.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> argmax(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_ARGMAX.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> argmax(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_ARGMAX.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> cumsum(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_CUMSUM.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> cumsum(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_CUMSUM.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> diff(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_DIFF.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> diff(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_DIFF.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T> reverse(arr: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_AX_REV.demut().call(arr.ptr(), -1).as<Pointer>());
}

fn<T> reverse(arr: 'T [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_AX_REV.demut().call(arr.ptr(), *dim).as<Pointer>());
}

fn<T, G> stack(a: 'T [NDArrayBase], b: 'G [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_STACK.demut().call(a.ptr(), b.ptr(), *dim).as<Pointer>());
}

fn<T, G> concat(a: 'T [NDArrayBase], b: 'G [NDArrayBase], dim: Int) -> NDArray {
    return NDArray(RYND_CONCAT.demut().call(a.ptr(), b.ptr(), *dim).as<Pointer>());
}

// Other functions
fn<T> permute(a: 'T [NDArrayBase], d0: Int, d1: Int) -> NDArray {
    return NDArray(RYND_PERMUTE.demut().call(a.ptr(), 2, *d0, *d1).as<Pointer>());
}

fn<T> permute(a: 'T [NDArrayBase], d0: Int, d1: Int, d2: Int) -> NDArray {
    return NDArray(RYND_PERMUTE.demut().call(a.ptr(), 3, *d0, *d1, *d2).as<Pointer>());
}

fn<T> permute(a: 'T [NDArrayBase], d0: Int, d1: Int, d2: Int, d3: Int) -> NDArray {
    return NDArray(RYND_PERMUTE.demut().call(a.ptr(), 4, *d0, *d1, *d2, *d3).as<Pointer>());
}

fn<T> transpose(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_PERMUTE.demut().call(a.ptr(), 2, 1, 0).as<Pointer>());
}

fn<T, G> matmul(a: 'T [NDArrayBase], b: 'G [NDArrayBase]) -> NDArray {
    return NDArray(RYND_MATMUL.demut().call(a.ptr(), b.ptr()).as<Pointer>());
}

// Unary functions
fn<T> floor(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_FLOOR.demut().call(a.ptr()).as<Pointer>());
}

fn<T> ceil(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_CEIL.demut().call(a.ptr()).as<Pointer>());
}

fn<T> round(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_ROUND.demut().call(a.ptr()).as<Pointer>());
}

fn<T> nonzero(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_NONZERO.demut().call(a.ptr()).as<Pointer>());
}

fn<T> cos(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_COS.demut().call(a.ptr()).as<Pointer>());
}

fn<T> sin(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_SIN.demut().call(a.ptr()).as<Pointer>());
}

fn<T> tan(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_TAN.demut().call(a.ptr()).as<Pointer>());
}

fn<T> acos(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_ACOS.demut().call(a.ptr()).as<Pointer>());
}

fn<T> asin(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_ASIN.demut().call(a.ptr()).as<Pointer>());
}

fn<T> atan(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_ATAN.demut().call(a.ptr()).as<Pointer>());
}

fn<T> sqrt(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_SQRT.demut().call(a.ptr()).as<Pointer>());
}

fn<T> exp(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_EXP.demut().call(a.ptr()).as<Pointer>());
}

fn<T> log2(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_LOG2.demut().call(a.ptr()).as<Pointer>());
}

fn<T> ln(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_LN.demut().call(a.ptr()).as<Pointer>());
}

fn<T> log10(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_LOG10.demut().call(a.ptr()).as<Pointer>());
}

fn<T> cosh(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_COSH.demut().call(a.ptr()).as<Pointer>());
}

fn<T> sinh(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_SINH.demut().call(a.ptr()).as<Pointer>());
}

fn<T> tanh(a: 'T [NDArrayBase]) -> NDArray {
    return NDArray(RYND_TANH.demut().call(a.ptr()).as<Pointer>());
}

fn<T> clip(a: 'T [NDArrayBase], low: Float, high: Float) -> NDArray {
    return NDArray(RYND_CLIP.demut().call(a.ptr(), *low, *high).as<Pointer>());
}

// Formatting
fn<T> print(arr: 'T [NDArrayBase]) {
    RYND_PRINT.demut().call(arr.ptr());
}